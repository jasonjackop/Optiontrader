import datetime as dt
import time
import logging
import random
import sys
import numpy as np

from optibook.synchronous_client import Exchange


from math import floor, ceil
from black_scholes import call_value, put_value, call_delta, put_delta, call_vega, put_vega
from libs import calculate_current_time_to_date

sys.path.append("/option_quoter/Dynamic_Delta.py")

from Dynamic_Delta import EuropeanCall, EuropeanPut

exchange = Exchange()
exchange.connect()

logging.getLogger('client').setLevel('ERROR')

def get_midpoint_value(instrument_id):
    """
    This function calculates the current midpoint of the order book supplied by the exchange for the instrument
    specified by <instrument_id>, returning None if either side or both sides do not have any orders available.
    """
    order_book = exchange.get_last_price_book(instrument_id=instrument_id)

    # If the instrument doesn't have prices at all or on either side, we cannot calculate a midpoint and return None
    if not (order_book and order_book.bids and order_book.asks):
        return None
    else:
        midpoint = (order_book.bids[0].price + order_book.asks[0].price) / 2.0
        print("midpoint:", midpoint)
        return midpoint

STOCK_ID = 'BMW'


OPTIONS = [
    {'id': 'BMW-2021_12_10-050C', 'expiry_date': dt.datetime(2021, 12, 10, 12, 0, 0), 'strike': 50, 'callput': 'call'},
    {'id': 'BMW-2021_12_10-075C', 'expiry_date': dt.datetime(2021, 12, 10, 12, 0, 0), 'strike': 75, 'callput': 'call'},
    {'id': 'BMW-2021_12_10-100C', 'expiry_date': dt.datetime(2021, 12, 10, 12, 0, 0), 'strike': 100, 'callput': 'call'},

    {'id': 'BMW-2021_12_10-050P', 'expiry_date': dt.datetime(2021, 12, 10, 12, 0, 0), 'strike': 50, 'callput': 'put'},
    {'id': 'BMW-2021_12_10-075P', 'expiry_date': dt.datetime(2021, 12, 10, 12, 0, 0), 'strike': 75, 'callput': 'put'},
    {'id': 'BMW-2021_12_10-100P', 'expiry_date': dt.datetime(2021, 12, 10, 12, 0, 0), 'strike': 100, 'callput': 'put'},
    
    {'id': 'BMW-2022_01_14-050C', 'expiry_date': dt.datetime(2022,  1, 14, 12, 0, 0), 'strike': 50, 'callput': 'call'},
    {'id': 'BMW-2022_01_14-075C', 'expiry_date': dt.datetime(2022,  1, 14, 12, 0, 0), 'strike': 75, 'callput': 'call'},
    {'id': 'BMW-2022_01_14-100C', 'expiry_date': dt.datetime(2022,  1, 14, 12, 0, 0), 'strike': 100, 'callput': 'call'},
    
    {'id': 'BMW-2022_01_14-050P', 'expiry_date': dt.datetime(2022,  1, 14, 12, 0, 0), 'strike': 50, 'callput': 'put'},
    {'id': 'BMW-2022_01_14-075P', 'expiry_date': dt.datetime(2022,  1, 14, 12, 0, 0), 'strike': 75, 'callput': 'put'},
    {'id': 'BMW-2022_01_14-100P', 'expiry_date': dt.datetime(2022,  1, 14, 12, 0, 0), 'strike': 100, 'callput': 'put'},
]


while True:
    callgreeklist = np.array([])
    putgreeklist = np.array([])
    
    asset_price = get_midpoint_value('BMW')
    
    for option in OPTIONS:
        if option['callput'] == 'call':
            info = EuropeanCall(asset_price,3,option['strike'],calculate_current_time_to_date(option['expiry_date']),0)
            callgreeklist = np.append(callgreeklist, np.array([info.delta, info.gamma, info.vega]))
            print(info.price)

        if option['callput'] == 'put':
            info = EuropeanPut(asset_price,3,option['strike'],calculate_current_time_to_date(option['expiry_date']),0)
            putgreeklist= np.append(putgreeklist, np.array([info.delta, info.gamma, info.vega]))
            print(info.price)
    x = np.split(callgreeklist,6)
    y = np.split(putgreeklist,6)
    print(y[0])
    
    time.sleep(5)
