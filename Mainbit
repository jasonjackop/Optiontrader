import datetime as dt
import time
import logging
import random
import sys
import numpy as np

from optibook.synchronous_client import Exchange


from math import floor, ceil
from libs import calculate_current_time_to_date

sys.path.append("/option_quoter/Dynamic_Delta.py")

from Dynamic_Delta import EuropeanCall, EuropeanPut

exchange = Exchange()
exchange.connect()

logging.getLogger('client').setLevel('ERROR')

def round_down_to_tick(price, tick_size):
    """
    Rounds a price down to the nearest tick, e.g. if the tick size is 0.10, a price of 0.97 will get rounded to 0.90.
    """
    return floor(price / tick_size) * tick_size


def round_up_to_tick(price, tick_size):
    """
    Rounds a price up to the nearest tick, e.g. if the tick size is 0.10, a price of 1.34 will get rounded to 1.40.
    """
    return ceil(price / tick_size) * tick_size

def get_midpoint_value(instrument_id):
    """
    This function calculates the current midpoint of the order book supplied by the exchange for the instrument
    specified by <instrument_id>, returning None if either side or both sides do not have any orders available.
    """
    order_book = exchange.get_last_price_book(instrument_id=instrument_id)

    # If the instrument doesn't have prices at all or on either side, we cannot calculate a midpoint and return None
    if not (order_book and order_book.bids and order_book.asks):
        return None
    else:
        midpoint = (order_book.bids[0].price + order_book.asks[0].price) / 2.0
        print("midpoint:", midpoint)
        return midpoint

def trade_would_breach_position_limit(instrument_id, volume, side, position_limit = 100):
    positions = exchange.get_positions()
    position_instrument = positions[instrument_id]

    if side == 'bid':
        return position_instrument + volume > position_limit
    elif side == 'ask':
        return position_instrument - volume < -position_limit
    else:
        raise Exception(f'''Invalid side provided: {side}, expecting 'bid' or 'ask'.''')


def update_quotes(callput, option_id, theoretical_price, credit, volume, position_limit, tick_size):
    """
    This function updates the quotes specified by <option_id>. We take the following actions in sequence:
        - pull (remove) any current oustanding orders
        - add credit to theoretical price and round to nearest tick size to create a set of bid/ask quotes
        - calculate max volumes to insert as to not pass the position_limit
        - reinsert limit orders on those levels

    Arguments:
        option_id: str           -  Exchange Instrument ID of the option to trade
        theoretical_price: float -  Price to quote around
        credit: float            -  Difference to subtract from/add to theoretical price to come to final bid/ask price
        volume:                  -  Volume (# lots) of the inserted orders (given they do not breach position limits)
        position_limit: int      -  Position limit (long/short) to avoid crossing
        tick_size: float         -  Tick size of the quoted instrument
    """

    # Print any new trades
    trades = exchange.poll_new_trades(instrument_id=option_id)
    for trade in trades:
        print(f'- Last period, traded {trade.volume} lots in {option_id} at price {trade.price:.2f}, side: {trade.side}.')

    # Pull (remove) all existing outstanding orders
    orders = exchange.get_outstanding_orders(instrument_id=option_id)
    
    old_bid_volume = 0
    old_ask_volume = 0
    for order_id, order in orders.items():
        print(f'- Deleting old {order.side} order in {option_id} for {order.volume} @ {order.price:8.2f}.')
        if order.side == 'ask':
            old_ask_volume = order.volume
        elif order.side == 'bid':
            old_bid_volume = order.volume
        exchange.delete_order(instrument_id=option_id, order_id=order_id)

    # Calculate bid and ask price
    bid_price = round_down_to_tick(theoretical_price - credit, tick_size)
    ask_price = round_up_to_tick(theoretical_price + credit, tick_size)
    
    

    # Calculate bid and ask volumes, taking into account the provided position_limit
    position = exchange.get_positions()[option_id]

    max_volume_to_buy = position_limit - position
    max_volume_to_sell = position_limit + position
    
    
    total_ask_volume = volume
    total_bid_volume = volume
    if position > 0:
      if round(ask_price - 0.1,1) != round(bid_price,1):
        ask_price = round(ask_price - 0.1, 1)
      total_ask_volume = volume + old_ask_volume
    elif position <0:
      if round(bid_price + 0.1,1) != round(ask_price,1):
        bid_price = round(bid_price + 0.1, 1)
      total_bid_volume = volume + old_bid_volume
    
    bid_volume = min(total_bid_volume, max_volume_to_buy)
    ask_volume = min(total_ask_volume, max_volume_to_sell)
    
    # Insert new limit orders
    if callput == "call":
        if bid_volume > 0 :
            print(f'- Inserting bid limit order in {option_id} for {bid_volume} @ {bid_price:8.2f}.')
            exchange.insert_order(instrument_id=option_id, price=bid_price, volume=bid_volume, side='bid', order_type='limit', )
        if ask_volume > 0:
            print(f'- Inserting ask limit order in {option_id} for {ask_volume} @ {ask_price:8.2f}.')
            exchange.insert_order(instrument_id=option_id, price=ask_price, volume=ask_volume, side='ask', order_type='limit', )
    elif callput == "put":
        if bid_volume > 0:
            print(f'- Inserting bid limit order in {option_id} for {bid_volume} @ {bid_price:8.2f}.')
            exchange.insert_order(instrument_id=option_id, price=bid_price, volume=bid_volume, side='bid', order_type='limit', )
        if ask_volume > 0:
            print(f'- Inserting ask limit order in {option_id} for {ask_volume} @ {ask_price:8.2f}.')
            exchange.insert_order(instrument_id=option_id, price=ask_price, volume=ask_volume, side='ask', order_type='limit', )

def triplegreekhedge(option, stock_value):
    positions = exchange.get_positions()
    
    totaldelta = 0
    totalgamma = 0
    totalvega = 0
    
    stockpos = positions['BMW']
    
    for x in option:
        position = positions[x['id']]
        if x['callput'] == 'call':
            info = EuropeanCall(stock_value, 3, x['strike'], calculate_current_time_to_date(x['expiry_date']), 0)
            totaldelta += position * info.delta
            totalgamma += position * info.gamma
            totalvega += position * info.vega
        elif x['callput'] == 'put':
            info = EuropeanPut(stock_value, 3, x['strike'], calculate_current_time_to_date(x['expiry_date']), 0)
            totaldelta += position * info.delta
            totalgamma += position * info.gamma
            totalvega += position * info.vega
    
    stockhedge = totaldelta + stockpos
    
    optionexposure = np.array([-totalgamma, -totalvega])
    
    return optionexposure, stockhedge
    

OPTIONS = [
    {'id': 'BMW-2021_12_10-050C', 'expiry_date': dt.datetime(2021, 12, 10, 12, 0, 0), 'strike': 50, 'callput': 'call'},
    {'id': 'BMW-2021_12_10-075C', 'expiry_date': dt.datetime(2021, 12, 10, 12, 0, 0), 'strike': 75, 'callput': 'call'},
    {'id': 'BMW-2021_12_10-100C', 'expiry_date': dt.datetime(2021, 12, 10, 12, 0, 0), 'strike': 100, 'callput': 'call'},

    {'id': 'BMW-2021_12_10-050P', 'expiry_date': dt.datetime(2021, 12, 10, 12, 0, 0), 'strike': 50, 'callput': 'put'},
    {'id': 'BMW-2021_12_10-075P', 'expiry_date': dt.datetime(2021, 12, 10, 12, 0, 0), 'strike': 75, 'callput': 'put'},
    {'id': 'BMW-2021_12_10-100P', 'expiry_date': dt.datetime(2021, 12, 10, 12, 0, 0), 'strike': 100, 'callput': 'put'},
    
    {'id': 'BMW-2022_01_14-050C', 'expiry_date': dt.datetime(2022,  1, 14, 12, 0, 0), 'strike': 50, 'callput': 'call'},
    {'id': 'BMW-2022_01_14-075C', 'expiry_date': dt.datetime(2022,  1, 14, 12, 0, 0), 'strike': 75, 'callput': 'call'},
    {'id': 'BMW-2022_01_14-100C', 'expiry_date': dt.datetime(2022,  1, 14, 12, 0, 0), 'strike': 100, 'callput': 'call'},
    
    {'id': 'BMW-2022_01_14-050P', 'expiry_date': dt.datetime(2022,  1, 14, 12, 0, 0), 'strike': 50, 'callput': 'put'},
    {'id': 'BMW-2022_01_14-075P', 'expiry_date': dt.datetime(2022,  1, 14, 12, 0, 0), 'strike': 75, 'callput': 'put'},
    {'id': 'BMW-2022_01_14-100P', 'expiry_date': dt.datetime(2022,  1, 14, 12, 0, 0), 'strike': 100, 'callput': 'put'},
]

HEDGERS = [
    {'id': 'BMW-2021_12_10-050C', 'expiry_date': dt.datetime(2021, 12, 10, 12, 0, 0), 'strike': 50, 'callput': 'call'},
    {'id': 'BMW-2022_01_14-050P', 'expiry_date': dt.datetime(2022,  1, 14, 12, 0, 0), 'strike': 50, 'callput': 'put'}
]

QUOTERS = [

    {'id': 'BMW-2021_12_10-075C', 'expiry_date': dt.datetime(2021, 12, 10, 12, 0, 0), 'strike': 75, 'callput': 'call'},
    {'id': 'BMW-2021_12_10-100C', 'expiry_date': dt.datetime(2021, 12, 10, 12, 0, 0), 'strike': 100, 'callput': 'call'},

    {'id': 'BMW-2021_12_10-050P', 'expiry_date': dt.datetime(2021, 12, 10, 12, 0, 0), 'strike': 50, 'callput': 'put'},
    {'id': 'BMW-2021_12_10-075P', 'expiry_date': dt.datetime(2021, 12, 10, 12, 0, 0), 'strike': 75, 'callput': 'put'},
    {'id': 'BMW-2021_12_10-100P', 'expiry_date': dt.datetime(2021, 12, 10, 12, 0, 0), 'strike': 100, 'callput': 'put'},
    
    {'id': 'BMW-2022_01_14-050C', 'expiry_date': dt.datetime(2022,  1, 14, 12, 0, 0), 'strike': 50, 'callput': 'call'},
    {'id': 'BMW-2022_01_14-075C', 'expiry_date': dt.datetime(2022,  1, 14, 12, 0, 0), 'strike': 75, 'callput': 'call'},
    {'id': 'BMW-2022_01_14-100C', 'expiry_date': dt.datetime(2022,  1, 14, 12, 0, 0), 'strike': 100, 'callput': 'call'},
    

    {'id': 'BMW-2022_01_14-075P', 'expiry_date': dt.datetime(2022,  1, 14, 12, 0, 0), 'strike': 75, 'callput': 'put'},
    {'id': 'BMW-2022_01_14-100P', 'expiry_date': dt.datetime(2022,  1, 14, 12, 0, 0), 'strike': 100, 'callput': 'put'}
    ]

x = 0
while True:
    x += 5
    
    greeklist = np.array([])
    optiongreeklist = np.array([])
    
    asset_price = get_midpoint_value('BMW')
    
    for option in QUOTERS:
        if option['callput'] == 'call':
            info = EuropeanCall(asset_price,3,option['strike'],calculate_current_time_to_date(option['expiry_date']),0)
            theoretical_value = info.price

        if option['callput'] == 'put':
            info = EuropeanPut(asset_price,3,option['strike'],calculate_current_time_to_date(option['expiry_date']),0)
            theoretical_value = info.price

        if theoretical_value > option['strike']:
            credit1 = theoretical_value - option['strike'] - 0.1
        elif theoretical_value < option['strike']:
            credit1 = option['strike'] - theoretical_value - 0.1
        else:
            credit1 = 0
        
        book = exchange.get_last_price_book(option['id'])
        if len(book.bids)<2 or len(book.asks)<2:
            credit2 = 0
        else:
            best_bid = float(book.bids[1].price)
            best_ask = float(book.asks[1].price)
            best_bid_vol = int(book.bids[1].volume)
            best_ask_vol = int(book.asks[1].volume)
            
            if theoretical_value > best_bid:
                diff_bid = theoretical_value - best_bid
            else:
                diff_bid = best_bid - theoretical_value
                
            if theoretical_value < best_ask:
                diff_ask = best_ask - theoretical_value
            else:
                diff_ask = theoretical_value - best_ask
            
            if diff_bid < diff_ask:
                credit2 = diff_bid
            else:
                credit2 = diff_ask
        
        if credit1 > credit2:
            credit = credit2
        elif credit1 < credit2:
            credit = credit1

        update_quotes(callput = option['callput'],
                option_id=option['id'],
                theoretical_price=theoretical_value,
                credit=credit,
                volume=5,
                position_limit=100,
                tick_size=0.10)
        time.sleep(0.15)
   
    
    for option in HEDGERS:
        if option['callput'] == 'call':
            info = EuropeanCall(asset_price,3,option['strike'],calculate_current_time_to_date(option['expiry_date']),0)
            optiongreeklist = np.append(optiongreeklist, np.array(([info.gamma, info.vega])))
        else:
            info = EuropeanPut(asset_price,3,option['strike'],calculate_current_time_to_date(option['expiry_date']),0)
            optiongreeklist = np.append(optiongreeklist, np.array(([info.gamma, info.vega])))            

    
    if x % 10 == 0:
        returner = triplegreekhedge(OPTIONS, asset_price)
    
        ogl = np.split(optiongreeklist,2)
        
        inv = np.linalg.inv(ogl)
        w = np.dot(inv, returner[0])
        
        print(w)
        
        book = exchange.get_last_price_book('BMW-2021_12_10-050C')
        book1 = exchange.get_last_price_book('BMW-2022_01_14-050P')
        
        for i in range(1):
            if not book.bids[0] or not book.asks[0] or not book1.bids[0] or not book1.asks[0]:
                continue
            else:
                slapeloze = book.bids[0].price
                nachten = book.asks[0].price
                slapeloze1 = book1.bids[0].price
                nachten1 = book1.asks[0].price
        
        count = 0
        for i in w:
            count += 1
            if abs(i) < 40:
                if i > 1:
                    if count == 1 and not trade_would_breach_position_limit( 'BMW-2021_12_10-050C', abs(int(i)), 'bid'):
                        exchange.insert_order(
                            instrument_id='BMW-2021_12_10-050C',
                            price=nachten,
                            volume= abs(int(i)),
                            side='bid',
                            order_type='ioc')
                    elif not trade_would_breach_position_limit('BMW-2022_01_14-050P', abs(int(i)), 'bid'):
                        exchange.insert_order(
                            instrument_id='BMW-2022_01_14-050P',
                            price=nachten1,
                            volume=abs(int(i)),
                            side='bid',
                            order_type='ioc')
                
                elif i < -1 :    
                    if count == 1 and not trade_would_breach_position_limit('BMW-2021_12_10-050C', abs(int(i)), 'ask') :
                        exchange.insert_order(
                            instrument_id='BMW-2021_12_10-050C',
                            price=slapeloze,
                            volume=abs(int(i)),
                            side='ask',
                            order_type='ioc')
                    elif not trade_would_breach_position_limit('BMW-2022_01_14-050P', abs(int(i)), 'ask'):
                        exchange.insert_order(
                            instrument_id='BMW-2022_01_14-050P',
                            price=slapeloze1,
                            volume=abs(int(i)),
                            side='ask',
                            order_type='ioc')
            else:
                print('hedge requirement too large, skipped')
            time.sleep(0.15)
        
        
        for option in OPTIONS:
            if option['callput'] == 'call':
                info = EuropeanCall(asset_price,3,option['strike'],calculate_current_time_to_date(option['expiry_date']),0)
                greeklist = np.append(greeklist, np.array([info.delta, info.gamma, info.vega]))
    
            if option['callput'] == 'put':
                info = EuropeanPut(asset_price,3,option['strike'],calculate_current_time_to_date(option['expiry_date']),0)
                greeklist = np.append(greeklist, np.array([info.delta, info.gamma, info.vega]))
          
        
        book2 = exchange.get_last_price_book('BMW')
        bmwbestbid = book2.bids[0].price
        bmwbestask = book2.asks[0].price
        
        if returner[1] > 1 and not trade_would_breach_position_limit('BMW', abs(int(returner[1])), 'ask'):
            exchange.insert_order(
                        instrument_id='BMW',
                        price=bmwbestbid,
                        volume=abs(int(returner[1])),
                        side='ask',
                        order_type='ioc')
        if returner[1] < -1 and not trade_would_breach_position_limit('BMW', abs(int(returner[1])), 'bid'):
            exchange.insert_order(
                        instrument_id='BMW',
                        price=bmwbestask,
                        volume=abs(int(returner[1])),
                        side='bid',
                        order_type='ioc')    
    
    time.sleep(1)
